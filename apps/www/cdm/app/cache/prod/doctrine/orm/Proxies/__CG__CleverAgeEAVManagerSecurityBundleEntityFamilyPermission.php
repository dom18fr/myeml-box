<?php

namespace Proxies\__CG__\CleverAge\EAVManager\SecurityBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class FamilyPermission extends \CleverAge\EAVManager\SecurityBundle\Entity\FamilyPermission implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'user', 'group', 'family', 'list', 'read', 'create', 'edit', 'delete', 'publish'];
        }

        return ['__isInitialized__', 'id', 'user', 'group', 'family', 'list', 'read', 'create', 'edit', 'delete', 'publish'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (FamilyPermission $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function hasPermission($permission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPermission', [$permission]);

        return parent::hasPermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\CleverAge\EAVManager\UserBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroup', []);

        return parent::getGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function setGroup(\CleverAge\EAVManager\UserBundle\Entity\Group $group = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroup', [$group]);

        return parent::setGroup($group);
    }

    /**
     * {@inheritDoc}
     */
    public function getFamily()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamily', []);

        return parent::getFamily();
    }

    /**
     * {@inheritDoc}
     */
    public function setFamily(\Sidus\EAVModelBundle\Model\FamilyInterface $family = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFamily', [$family]);

        return parent::setFamily($family);
    }

    /**
     * {@inheritDoc}
     */
    public function isList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isList', []);

        return parent::isList();
    }

    /**
     * {@inheritDoc}
     */
    public function setList($list)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setList', [$list]);

        return parent::setList($list);
    }

    /**
     * {@inheritDoc}
     */
    public function isRead()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRead', []);

        return parent::isRead();
    }

    /**
     * {@inheritDoc}
     */
    public function setRead($read)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRead', [$read]);

        return parent::setRead($read);
    }

    /**
     * {@inheritDoc}
     */
    public function isCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCreate', []);

        return parent::isCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreate($create)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreate', [$create]);

        return parent::setCreate($create);
    }

    /**
     * {@inheritDoc}
     */
    public function isEdit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEdit', []);

        return parent::isEdit();
    }

    /**
     * {@inheritDoc}
     */
    public function setEdit($edit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEdit', [$edit]);

        return parent::setEdit($edit);
    }

    /**
     * {@inheritDoc}
     */
    public function isDelete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDelete', []);

        return parent::isDelete();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelete($delete)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelete', [$delete]);

        return parent::setDelete($delete);
    }

    /**
     * {@inheritDoc}
     */
    public function isPublish()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublish', []);

        return parent::isPublish();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublish($publish)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublish', [$publish]);

        return parent::setPublish($publish);
    }

}
